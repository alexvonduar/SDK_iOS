//
//  ViewController.m
//  iPhoneTest
//
//  Created by choi on 13. 2. 18..
//  Copyright (c) 2013년 choi. All rights reserved.
//

#import "ViewController.h"
#import "AppDelegate.h"

@implementation ViewController
@synthesize penController;
@synthesize penSleepView;
@synthesize sections;
@synthesize items;
@synthesize drawViewController;
@synthesize status, rawPt, convPt, pressure, temperature, aliveSec, smFlag;
@synthesize position, smProperties;
@synthesize curCalibrationSize, curCalibrationRect;
@synthesize penColor;

-(void) dealloc {
    if (self.sections) {
        [self.sections removeAllObjects];
        self.sections = nil;
    }
    if (self.items) {
        [self.items removeAllObjects];
        self.items = nil;
    }
    self.drawViewController = nil;
    self.position = nil;
    self.penColor = nil;
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_PEN_READ_DATA" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_MSG" object:nil];
    
    [debugTextView release];
    [leftDeviceBtn release];
    [rightDeviceBtn release];
    [positionLabel release];
    [mTableView release];
    [super dealloc];
}
-(id) initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {
#if TARGET_IPHONE_SIMULATOR
        self.penController = nil;
#else
        AppDelegate* delegate = (AppDelegate*)[[UIApplication sharedApplication] delegate];
        self.penController = delegate.penController;
        [self.penController setRetObj:self];
#endif
        penSleepCheckTimer = nil;
        self.penSleepView = nil;
        self.sections = nil;
        self.items = nil;
        self.drawViewController = nil;
        battery[0] = -1;
        battery[1] = -1;
        self.position = @"";
        self.curCalibrationRect = CGRectZero;
        self.curCalibrationSize = A4;
        self.penColor = [UIColor blackColor];
    }
    return self;
}
-(void) viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    temperatureCnt = 0;
    if (self.penController) {
        [self.penController setRetObj:self];
        [self.penController setRetObjForEnv:self];
        if (self.penController.bConnected) {
            m_penConntectedStatus = YES;
            if (self.penController.modelCode == EquilSmartMarker) {
                [self ReadThreadStart];
            }
            else{
                [self ReadThreadOff];
            }
        }
        else {
            m_penConntectedStatus = NO;
            [self ReadThreadOff];
        }
    }
    else
        m_penConntectedStatus = NO;
}
-(void) devicePositionShow:(BOOL)show {
    leftDeviceBtn.hidden = !show;
    rightDeviceBtn.hidden = !show;
    positionLabel.hidden = !show;
}
-(void) viewDidLoad {
    [super viewDidLoad];
    
    isFirstPenSleepOldDevice = NO;
    isRecvEnvDataFirst = YES;
    
    packetCnt = 0;
    errCntX = 0;
    errCntY = 0;
    beforeRawX = -1;
    beforeRawY = -1;
    btPosition = 0;
    battery[0] = -1;
    battery[1] = -1;
    smFlag = 0;
    self.smProperties = @"";
    [self devicePositionShow:NO];
	[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(FreeLogMsg:) name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenHandlerWithMsg:) name:@"PNF_PEN_READ_DATA" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenCallBackFunc:) name:@"PNF_MSG" object:nil];
    
    m_penConntectedStatus = NO;
    [self.penController startPen];
    [self checkPenConnect];
    
    self.sections = [[[NSMutableArray alloc] init] autorelease];
    
    self.items = [[[NSMutableDictionary alloc] init] autorelease];
    NSMutableArray* info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"ModelCode"];
    [info addObject:@"H/W Version"];
    [info addObject:@"MCU1 Version"];
    [info addObject:@"MCU2 Version"];
    NSString* sectionStr = @"H/W Info";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Status [1 = Down, 2 = Move, 3 = Up, 4 = Hover]"];
    [info addObject:@"Raw  Point"];
    [info addObject:@"Conv Point"];
    sectionStr = @"Status";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Pressure"];
    [info addObject:@"Temperaure"];
    [info addObject:@"Alive Sec"];
    sectionStr = @"Smartpen";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Direction"];
    [info addObject:@"Flag"];
    [info addObject:@"Audio Mode"];
    [info addObject:@"Volume"];
    [info addObject:@"Properties"];
    [info addObject:@"Connection Type"];
    sectionStr = @"Smartmarker";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Station"];
    [info addObject:@"Pen"];
    sectionStr = @"Battery";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Down, Move, Up"];
    [info addObject:@"Total"];
    [info addObject:@"Byte(Kbyte)"];
    sectionStr = @"Count";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Error Count (X, Y)"];
    [info addObject:@"Total"];
    sectionStr = @"Packet";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    mTableView.dataSource = self;
    mTableView.delegate = self;
    [mTableView reloadData];
}
-(void) viewDidUnload {
    [debugTextView release];
    debugTextView = nil;
    [leftDeviceBtn release];
    leftDeviceBtn = nil;
    [rightDeviceBtn release];
    rightDeviceBtn = nil;
    [positionLabel release];
    positionLabel = nil;
    [mTableView release];
    mTableView = nil;
    [super viewDidUnload];
}
-(void) didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
-(BOOL) shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
	return UIInterfaceOrientationIsPortrait(interfaceOrientation);
}
-(BOOL) shouldAutoRotate {
    return YES;
}
-(NSUInteger)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskPortrait|UIInterfaceOrientationMaskPortraitUpsideDown;
}
-(NSString *) platform {
    size_t size;
    sysctlbyname("hw.machine", NULL, &size, NULL, 0);
    char *machine = malloc(size);
    sysctlbyname("hw.machine", machine, &size, NULL, 0);
    NSString *platform = [NSString stringWithCString:machine encoding:NSUTF8StringEncoding];
    free(machine);
    return platform;
}
-(void) changeDevicePosition:(BOOL)left init:(BOOL)_init {
    [leftDeviceBtn setSelected:left];
    [rightDeviceBtn setSelected:!left];
    
    if (_init) {
        if (self.penController == nil) return;
        if (IS_IPAD) {
            if (self.penController.modelCode == SmartPen) {
                CGPoint smartPenCalPoint[9];
                NSString* platformStr = [self platform];
                if ([platformStr isEqualToString:@"iPad2,5"] ||
                    [platformStr isEqualToString:@"iPad2,6"] ||
                    [platformStr isEqualToString:@"iPad2,7"] ||
                    [platformStr isEqualToString:@"iPad4,4"] ||
                    [platformStr isEqualToString:@"iPad4,5"]) { // ipad mini
                    IPAD_MINI()
                }
                else {
                    IPAD()
                }
                CGFloat scale = 1.0f;
                if ([[UIScreen mainScreen] respondsToSelector:@selector(scale)]) {
                    scale = [[UIScreen mainScreen] scale];
                }
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 768, 1024))
                                        GuideMargin:40*scale
                                         CalibPoint:smartPenCalPoint];
            }
            else if (self.penController.modelCode == LolLolPen) { // lollol pen
                CGPoint m_CalResultPoint[4];
                if (leftDeviceBtn.selected) {
                    m_CalResultPoint[0] = CGPointMake(3496, -5);
                    m_CalResultPoint[1] = CGPointMake(253, 3807);
                    m_CalResultPoint[2] = CGPointMake(2954, 6126);
                    m_CalResultPoint[3] = CGPointMake(6197, 2314);
                }
                else {
                    m_CalResultPoint[0] = CGPointMake(1140, 2603);
                    m_CalResultPoint[1] = CGPointMake(4878, 6014);
                    m_CalResultPoint[2] = CGPointMake(7241, 3379);
                    m_CalResultPoint[3] = CGPointMake(3503, -32);
                }
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 768, 1024))
                                        GuideMargin:0
                                         CalibPoint:m_CalResultPoint];
            }
            else if (self.penController.modelCode == Equil || self.penController.modelCode == EquilPro) {
               CGPoint calResultPoint[4];
               NSString *locale = [[NSLocale currentLocale] localeIdentifier];
                if ([locale isEqualToString:@"en_US"] || [locale isEqualToString:@"en_CA"]) {
                    // Letter
                    LETTER()
                    self.curCalibrationSize = Letter;
                }
                else {
                    // A4
                    A4()
                    self.curCalibrationSize = A4;
                }
                float w = calResultPoint[2].x-calResultPoint[0].x;
                float h = calResultPoint[1].y-calResultPoint[0].y;
                self.curCalibrationRect = CGRectMake(calResultPoint[0].x, calResultPoint[0].y, w, h);
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 768, 1024))
                                        GuideMargin:0
                                         CalibPoint:calResultPoint];
            }
            else if (self.penController.modelCode == EquilSmartMarker) {
                self.curCalibrationSize = FT8X5;
                CGPoint calResultPoint[4];
                FT_8X5()
                float w = calResultPoint[2].x-calResultPoint[0].x;
                float h = calResultPoint[1].y-calResultPoint[0].y;
                self.curCalibrationRect = CGRectMake(calResultPoint[0].x, calResultPoint[0].y, w, h);
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 768, 1024))
                                           GuideMargin:0
                                            CalibPoint:calResultPoint];
            }
        }
        else {
            if (self.penController.modelCode <= LolLolPen) {
                CGPoint calResultPoint[4];
                if (leftDeviceBtn.selected) {
                    calResultPoint[0] = CGPointMake(3650, 1092);
                    calResultPoint[1] = CGPointMake(2041, 2982);
                    calResultPoint[2] = CGPointMake(3376, 4128);
                    calResultPoint[3] = CGPointMake(4960, 2274);
                }
                else {
                    calResultPoint[0] = CGPointMake(2474, 2448);
                    calResultPoint[1] = CGPointMake(4352, 4039);
                    calResultPoint[2] = CGPointMake(5436, 2659);
                    calResultPoint[3] = CGPointMake(3591, 1096);
                }
                CGFloat scale = 1.0f;
                if ([[UIScreen mainScreen] respondsToSelector:@selector(scale)]) {
                    scale = [[UIScreen mainScreen] scale];
                }
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 320, 480))
                                        GuideMargin:84*scale
                                         CalibPoint:calResultPoint];
            }
            else if (self.penController.modelCode == Equil || self.penController.modelCode == EquilPro) {
                CGPoint calResultPoint[4];
#if 0 //장평유지
                calResultPoint[0] = CGPointMake(1839, 340);
                calResultPoint[1] = CGPointMake(1839, 5704);
                calResultPoint[2] = CGPointMake(5415, 5704);
                calResultPoint[3] = CGPointMake(5415, 340);
#else
                NSString *locale = [[NSLocale currentLocale] localeIdentifier];
                if ([locale isEqualToString:@"en_US"] || [locale isEqualToString:@"en_CA"]) {
                    // Letter
                    LETTER()
                    self.curCalibrationSize = Letter;
                }
                else {
                    // A4
                    A4()
                    self.curCalibrationSize = A4;
                }
#endif
                float w = calResultPoint[2].x-calResultPoint[0].x;
                float h = calResultPoint[1].y-calResultPoint[0].y;
                self.curCalibrationRect = CGRectMake(calResultPoint[0].x, calResultPoint[0].y, w, h);
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 320, 480))
                                        GuideMargin:0
                                         CalibPoint:calResultPoint];
            }
            else if (self.penController.modelCode == EquilSmartMarker) {
                self.curCalibrationSize = FT8X5;
                CGPoint calResultPoint[4];
                FT_8X5()
                float w = calResultPoint[2].x-calResultPoint[0].x;
                float h = calResultPoint[1].y-calResultPoint[0].y;
                self.curCalibrationRect = CGRectMake(calResultPoint[0].x, calResultPoint[0].y, w, h);
                [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, 320, 480))
                                           GuideMargin:0
                                            CalibPoint:calResultPoint];
            }
        }
    }
}
-(void) addDebugText:(NSString*)text {
    NSString* t = [NSString stringWithFormat:@"%@\n%@", debugTextView.text, text];
    [debugTextView setText:t];
    [debugTextView scrollRangeToVisible:NSMakeRange([debugTextView.text length], 0)];
}
-(void) checkPenConnect {
    if (self.penController == nil) {
        [self devicePositionShow:NO];
        return;
    }
    if (self.penController.bConnected) {
        if (self.penController.modelCode == LolLolPen) {
            [self devicePositionShow:YES];
        }
        else {
            [self devicePositionShow:NO];
        }
    }
    else {
        [self devicePositionShow:NO];
    }
    
    if (m_penConntectedStatus == self.penController.bConnected) {
        return;
    }
    
    if (self.penController.bConnected) {
        m_penConntectedStatus = YES;
        [NSTimer scheduledTimerWithTimeInterval:3.0f
                                         target:self
                                       selector:@selector(lazyCheckCalibration)
                                       userInfo:nil
                                        repeats:NO];
    }
    else {
        m_penConntectedStatus = NO;
        [self devicePositionShow:NO];
    }
}
/*
 Smart pen 과 lollol펜의 모델코드가 다름
 lollol펜의 모델코드 셋팅시간이 펜이 연결되고 1초후에 전송됨
 그래서 3.0초의 딜레이를 줌
 modelCode = 0 -> smart pen
 modelCode = 1 -> lollol pen
 modelCode = 2 -> Equil
 modelCode = 3 -> Equil 2
 modelCode = 4 -> Equil Smartmarker
 */
-(void) lazyCheckCalibration {
    if (![self.penController bExistCalibrationInfo]) {
        [self addDebugText:@"calibration data not exist"];
        if (self.penController.modelCode == SmartPen) {
            [self addDebugText:@"smart pen"];
            if (IS_IPAD)
                [self.penController setProjectiveLevel:9];
            else
                [self addDebugText:@"The iPhone does not support smart pen."];
        }
        else if (self.penController.modelCode == LolLolPen) {
            [self addDebugText:@"lollol pen"];
            if (IS_IPAD)
                [self.penController setProjectiveLevel:4];
        }
        else if (self.penController.modelCode == Equil) {
            [self addDebugText:@"Equil"];
            if (IS_IPAD)
                [self.penController setProjectiveLevel:4];
        }
        else if (self.penController.modelCode == EquilPro) {
            [self addDebugText:@"Equil 2"];
            if (IS_IPAD)
                [self.penController setProjectiveLevel:4];
        }
        else if (self.penController.modelCode == EquilSmartMarker) {
            [self addDebugText:@"Equil Smartpen"];
            if (IS_IPAD)
                [self.penController setProjectiveLevel:4];
        }
        [self changeDevicePosition:YES init:YES];
        if (self.penController.modelCode == EquilSmartMarker) {
            [self ReadThreadStart];
        }
        else{
            [self ReadThreadOff];
        }
    }
    else {
        [self addDebugText:@"calibration data exist"];
        if (self.penController.modelCode == SmartPen) {
            [self addDebugText:@"smart pen"];
            if (IS_IPAD) {
                if ([self.penController getProjectiveLevel] == 4) {
                    [self.penController setProjectiveLevel:9];
                    [self addDebugText:@"change pen type"];
                    [self changeDevicePosition:YES init:YES];
                }
            }
            else
                [self addDebugText:@"The iPhone does not support smart pen."];
        }
        else if (self.penController.modelCode == LolLolPen) {
            [self addDebugText:@"lollol pen"];
            if (IS_IPAD) {
                if ([self.penController getProjectiveLevel] == 9) {
                    [self addDebugText:@"change pen type"];
                    [self.penController setProjectiveLevel:4];
                }
            }
            [self changeDevicePosition:YES init:YES];
        }
        else if (self.penController.modelCode == Equil) {
            [self addDebugText:@"Equil"];
            if (IS_IPAD) {
                if ([self.penController getProjectiveLevel] == 9) {
                    [self addDebugText:@"change pen type"];
                    [self.penController setProjectiveLevel:4];
                }
            }
            [self changeDevicePosition:YES init:YES];
        }
        else if (self.penController.modelCode == EquilPro) {
            [self addDebugText:@"Equil2"];
            if (IS_IPAD) {
                if ([self.penController getProjectiveLevel] == 9) {
                    [self addDebugText:@"change pen type"];
                    [self.penController setProjectiveLevel:4];
                }
            }
            [self changeDevicePosition:YES init:YES];
        }
        else if (self.penController.modelCode == EquilSmartMarker) {
            [self addDebugText:@"Equil Smartmarker"];
            if (IS_IPAD) {
                if ([self.penController getProjectiveLevel] == 9) {
                    [self addDebugText:@"change pen type"];
                    [self.penController setProjectiveLevel:4];
                }
            }
            [self changeDevicePosition:YES init:YES];
        }
        if (self.penController.modelCode == EquilSmartMarker) {
            [self ReadThreadStart];
        }
        else{
            [self ReadThreadOff];
        }
    }
    if (self.penController.modelCode == LolLolPen)
        [self devicePositionShow:YES];
    else
        [self devicePositionShow:NO];
    [mTableView reloadData];
}
#pragma mark - self.penController
-(void) penIdleTimerStop {
    if(penSleepCheckTimer != nil){
        [penSleepCheckTimer invalidate];
        [penSleepCheckTimer release];
        penSleepCheckTimer = nil;
    }
}
-(void) closePenSleepView {
    if (self.penSleepView) {
        [self.penSleepView dismissWithClickedButtonIndex:0 animated:NO];
        self.penSleepView = nil;
    }
}
-(void) showPenSleepView {
    self.penSleepView = [[[UIAlertView alloc] initWithTitle:@""
                                                  message:@"Press Pen power button once to use as the pen is on sleep mode."
                                                 delegate:nil
                                        cancelButtonTitle:@"Ok"
                                        otherButtonTitles:nil] autorelease];
    [self.penSleepView show];
}
-(void) PenHandlerEnv:(NSArray*)info {
    [mTableView reloadData];
//    NSLog(@"m_self.penController.MCU1Version = %d", self.penController.MCU1Version);
//    NSLog(@"m_self.penController.MCU2Version = %d", self.penController.MCU2Version);
//    NSLog(@"m_self.penController.HWVersion = %d", self.penController.HWVersion);
    if (self.penController.MCU1Version >= 2 && self.penController.MCU2Version >= 2 && self.penController.HWVersion >= 2) {
        NSLog(@"m_self.penController.penAliveSec = %d", self.penController.penAliveSec);
        if (self.penController.penAliveSec > 0) {
            [self closePenSleepView];
        }
    }
    if (isRecvEnvDataFirst) {
        isRecvEnvDataFirst = NO;
        [self penIdleTimerStop];
        if (self.penController.modelCode == Equil || self.penController.modelCode == EquilPro) {
            penSleepCheckTimer = [[NSTimer scheduledTimerWithTimeInterval:5
                                                                   target:self
                                                                 selector:@selector(onTimerForPenAlive:)
                                                                 userInfo:nil
                                                                  repeats:YES] retain];
            savePenSleepRemainingTime = [[NSDate date] timeIntervalSince1970] + 600;
            savePenAliveSec = 600;
        }
    }
}
-(void) onTimerForPenAlive:(NSTimer *)timer {
    long curTime = [[NSDate date] timeIntervalSince1970];
    BOOL check = NO;
    if (self.penController.modelCode == Equil) {
        if (self.penController.MCU1Version >= 2 && self.penController.MCU2Version >= 2 && self.penController.HWVersion >= 2) {
            check = YES;
        }
    }
    else if (self.penController.modelCode == EquilPro) {
        if (self.penController.MCU1Version >= 1 && self.penController.MCU2Version >= 1 && self.penController.HWVersion >= 1) {
            check = YES;
        }
    }
    else if (self.penController.modelCode == EquilSmartMarker) {
        return;
    }
    
    if (check) {
        if (self.penController.penAliveSec == 0) {
            [self showPenSleepView];
            [self penIdleTimerStop];
            return;
        }
        if (self.penController.penAliveSec != 0 && savePenAliveSec != self.penController.penAliveSec) {
            savePenAliveSec = self.penController.penAliveSec;
            savePenSleepRemainingTime = curTime + self.penController.penAliveSec;
        }
    }
    else {
        if (!isFirstPenSleepOldDevice) {
            isFirstPenSleepOldDevice = YES;
            savePenSleepRemainingTime = curTime - 10;
        }
    }
    NSLog(@"***********************************");
    NSLog(@"curTime = %ld", curTime);
    NSLog(@"savePenSleepRemainingTime = %ld", savePenSleepRemainingTime);
    NSLog(@"savePenSleepRemainingTime - curTime = %ld", savePenSleepRemainingTime - curTime);
    NSLog(@"savePenAliveSec = %d", savePenAliveSec);
    if (savePenSleepRemainingTime < curTime) {
        [self showPenSleepView];
        [self penIdleTimerStop];
    }
}
-(void) PenHandler:(id)sender {
    // deprecated
}
-(void) ReadThreadStart {
    [self addDebugText:@"ReadThreadStart"];
    if (readThread == nil) {
        readThread = [[NSThread alloc] initWithTarget:self
                                             selector:@selector(runReadThread) object:self];
        readThreadStop=NO;
        readThreadPause=NO;
        [readThread start];
        
    }
    if (self.penController) {
        [self.penController StartReadQ];
    }
}
-(void) runReadThread {
    @autoreleasepool {
        while (1) {
            if (readThreadStop) {
                break;
            }
            
            if ([[UIApplication sharedApplication] isIgnoringInteractionEvents]) {
                [NSThread sleepForTimeInterval:0.02];
                continue;
            }
            
            NSDictionary* dic = [self.penController ReadQ];
            if(dic) {
                [self performSelectorOnMainThread:@selector(PenHandlerWithDictionary:) withObject:dic waitUntilDone:YES];
//                [self performSelector:@selector(PenHandlerWithDictionary:) onThread:readThread withObject:dic waitUntilDone:YES];
                [self.penController RemoveQ];
            }
            else {
                [NSThread sleepForTimeInterval:0.02];
            }
        } // while (1) {
    }
}
-(void) ReadThreadOff {
    [self addDebugText:@"ReadThreadOff"];
    readThreadStop = YES;
    [NSThread sleepForTimeInterval:0.2];
    if (readThread) {
        [readThread cancel];
        [readThread release];
        readThread = nil;
    }
    if (self.penController) {
        [self.penController EndReadQ];
    }
}
-(void) PenHandlerWithMsg:(NSNotification*) note {
    NSDictionary* dic = [note object];
    if ([self.penController getRetObj] != self)
        return;
    [self PenHandlerWithDictionary:dic];
}
-(void) PenHandlerWithDictionary:(NSDictionary*) dic {
    int PenStatus  = [[dic objectForKey:@"PenStatus"] intValue];
    CGPoint ptRaw = [[dic objectForKey:@"ptRaw"] CGPointValue];
    CGPoint ptConv = [[dic objectForKey:@"ptConv"] CGPointValue];
    int Temperature = [[dic objectForKey:@"Temperature"] intValue];
    int modelCode = [[dic objectForKey:@"modelCode"] intValue];
    int SMPenFlag = [[dic objectForKey:@"SMPenFlag"] intValue];
    int SMPenState = [[dic objectForKey:@"SMPenState"] intValue];
    int press = [[dic objectForKey:@"pressure"] intValue];
    [self PenHandlerWithArgs:ptRaw
                      ptConv:ptConv
                   PenStatus:PenStatus
                 Temperature:Temperature
                   ModelCode:modelCode
                   SMPenFlag:SMPenFlag
                  SMPenState:SMPenState
                    Pressure:press];
}
-(void) PenHandlerWithArgs:(CGPoint) Arg_ptRaw ptConv:(CGPoint) Arg_ptConv PenStatus:(int) Arg_PenStatus
               Temperature:(int) Arg_Temperature ModelCode:(int) Arg_modelCode
                SMPenFlag :(int) Arg_SMPenFlag SMPenState:(int) Arg_SMPenState
                  Pressure:(int) Arg_pressure {
    isRecvEnvDataFirst = YES;
    [self penIdleTimerStop];
    [self closePenSleepView];
    
    if (self.penController == nil) {
        [self addDebugText:@"self.penController is not set"];
        return;
    }

    packetCnt++;
    if (Arg_Temperature <= 10) {
        temperatureCnt++;
        if (temperatureCnt >= 1000) {
            temperatureCnt = 0;
            [self.view makeToast:@"Temperature Error" duration:TOAST_DURATION position:@"bottom"];
        }
    }
    else {
        temperatureCnt = 0;
    }
    self.status = Arg_PenStatus;
    self.temperature = Arg_Temperature;
    self.rawPt = Arg_ptRaw;
    self.convPt = Arg_ptConv;
    self.pressure = Arg_pressure;
    self.smFlag = (Arg_SMPenFlag & 0x01);
    switch (Arg_PenStatus) {
        case PEN_DOWN:
            NSLog(@"========================================== Donw");
            downCnt++;
            break;
        case PEN_MOVE:
            //            NSLog(@"Move");
            moveCnt++;
            break;
        case PEN_UP:
            NSLog(@"******************************************* Up");
            upCnt++;
            break;
        case PEN_HOVER:
            //            NSLog(@"Hover");
            break;
        default:
            break;
    }
    if (Arg_modelCode == EquilSmartMarker) {
        [self setPenPropertiesForSM:Arg_SMPenState];
    }
    if (beforeRawX == -1) {
        beforeRawX = Arg_ptRaw.x;
    }
    else {
        if (Arg_ptRaw.x-beforeRawX>1.0f) {
            errCntX++;
        }
    }
    if (beforeRawY == -1) {
        beforeRawY = Arg_ptRaw.y;
    }
    else {
        if (Arg_ptRaw.y-beforeRawY>1.0f) {
            errCntY++;
        }
    }
    
    if (self.presentedViewController != nil) {
        if ([self.presentedViewController isKindOfClass:[DrawViewController class]]) {
            BOOL erase = NO;
            BOOL big = NO;
            float eraseSize = 0.;
            if (Arg_modelCode == EquilSmartMarker &&
                ([self.smProperties isEqualToString:@"Erase Cap"] || [self.smProperties isEqualToString:@"Erase Big"])) {
                erase = YES;
                if ([self.smProperties isEqualToString:@"Erase Big"])
                    big = YES;
                eraseSize = [penController calcSmartMarkerEraseThick:big];
            }
            [self.drawViewController SetDrawInfo:Arg_PenStatus pressure:Arg_pressure pt:Arg_ptConv color:self.penColor erase:erase eraseSize:eraseSize];
        }
    }
    else {
        [mTableView reloadData];
    }
}
-(void) FreeLogMsg:(NSNotification *) note {
    NSString * szS = (NSString *) [note object];
    NSLog(@"szS = [%@]", szS);
    if ([szS compare:@"FAIL_LISTENING"] == 0 ) {
        UIAlertView* av = [[UIAlertView alloc] initWithTitle:@""
                                                     message:@"abnormal connect. please reconnect device"
                                                    delegate:nil
                                           cancelButtonTitle:@"확인"
                                           otherButtonTitles:nil];
        [av show];
        [av release];
        return;
    }
    else if ([szS isEqualToString:@"CONNECTED"]) {
        [self addDebugText:szS];
        penErrorCnt = 0;
        isFirstPenSleepOldDevice = NO;
    }
    else if ([szS isEqualToString:@"INVALID_PROTOCOL"]) {
        return;
    }
    else if ([szS isEqualToString:@"SESSION_CLOSED"]) {
        [self addDebugText:szS];
        [self penIdleTimerStop];
        isFirstPenSleepOldDevice = NO;
        [self closePenSleepView];
        [self ReadThreadOff];
        self.position = @"";
        self.smProperties = @"";
        self.penColor = [UIColor blackColor];
    }
    else if ([szS isEqualToString:@"PEN_RMD_ERROR"]) {
        if (self.penController && (self.penController.PenStatus == PEN_DOWN || self.penController.PenStatus == PEN_MOVE)) {
            penErrorCnt++;
            if (penErrorCnt > 5) {
                [self.view makeToast:@"RMD_ERROR" duration:TOAST_DURATION position:@"bottom"];
                penErrorCnt = 0;
            }
        }
        return;
    }
    else if ([szS isEqualToString:@"FIRST_DATA_RECV"]) {
        [self addDebugText:szS];
    }
    else if ([szS isEqualToString:@"CLICK"] ||
             [szS isEqualToString:@"DOUBLE_CLICK"] ||
             [szS isEqualToString:@"Gesture Circle Clockwise"] ||
             [szS isEqualToString:@"Gesture Circle CounterClockwise"]) {
        [self addDebugText:szS];
        [self penIdleTimerStop];
        [self closePenSleepView];
        return;
    }
    [self checkPenConnect];
    packetCnt++;
    [mTableView reloadData];
}
-(void) PenCallBackFunc:(NSNotification *)call {
    NSString * szS = (NSString *) [call object];
    if([szS isEqualToString:@"BATTERY_INFO"]) {
        battery[0] = self.penController.battery_station;
        battery[1] = self.penController.battery_pen;
        [mTableView reloadData];
    }
    else if([szS isEqualToString:@"NEW_PAGE"] || [szS isEqualToString:@"DUPLICATE_PAGE"]) {
        [self addDebugText:szS];
    }
    else if ([szS isEqualToString:@"CHANGE_DEVECE_POSITION"] || [szS isEqualToString:@"CHANGE_DEVECE_POSITION_FIRST"]) {
        self.position = @"Left";
        if (self.penController.StationPosition == UIInterfaceOrientationLandscapeLeft)
            self.position = @"Left";
        else if (self.penController.StationPosition == UIInterfaceOrientationLandscapeRight)
            self.position = @"Left";
        else if (self.penController.StationPosition == UIInterfaceOrientationPortrait)
            self.position = @"Top";
        else if (self.penController.StationPosition == UIDeviceOrientationPortraitUpsideDown)
            self.position = @"Bottom";
        [mTableView reloadData];
    }
}
-(void) setPenPropertiesForSM:(int)Arg_SMPenState {
    switch (Arg_SMPenState) {
        case 0x51: // red marker
            self.smProperties = @"Red";
            self.penColor = [UIColor colorWithRed:1.0 green:0 blue:0 alpha:1];
            break;
        case 0x52: // green marker
            self.smProperties = @"Green";
            self.penColor = [UIColor colorWithRed:60.0/255.0 green:184.0/255.0 blue:120.0/255.0 alpha:1];
            break;
        case 0x53:
            self.smProperties = @"Yellow";
            self.penColor = [UIColor colorWithRed:1.0 green:1.0 blue:0 alpha:1];
            break;
        case 0x54:
            self.smProperties = @"Blue";
            self.penColor = [UIColor colorWithRed:0 green:0 blue:1.0 alpha:1];
            break;
        case 0x56:
            self.smProperties = @"Violet";
            self.penColor = [UIColor colorWithRed:128.0/255.0 green:0 blue:128.0/255.0 alpha:1];
            break;
        case 0x58:
            self.smProperties = @"Black";
            self.penColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:1];
            break;
        case 0x59:  // eraser cap
            self.smProperties = @"Erase Cap";
            self.penColor = [UIColor whiteColor];
            break;
        case 0x50:
        case 0x5C:  // big eraser
            self.smProperties = @"Erase Big";
            self.penColor = [UIColor whiteColor];
            break;
        default:
            break;
    }
}
#pragma mark - Calibration
- (IBAction)clearLog:(id)sender {
    [debugTextView setText:@""];
}
- (IBAction)calibrationClicked:(id)sender {
    if (self.penController == nil) {
        return;
    }
    if (!self.penController.bConnected) {
        UIAlertView* av = [[UIAlertView alloc] initWithTitle:@""
                                                     message:@"Connect receiver first."
                                                    delegate:nil
                                           cancelButtonTitle:@"Ok"
                                           otherButtonTitles:nil];
        [av show];
        [av release];
        return;
    }
    if (IS_IPAD) {
        if (self.penController.modelCode == SmartPen) {
            Calib9ViewController* cVController = [[Calib9ViewController alloc] initWithNibName:@"Calib9ViewController" bundle:nil];
            [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
            [cVController SetPenController:self.penController];
            cVController.delegate = self;
            [self presentViewController:cVController animated:YES completion:^{
                [self.penController setRetObj:nil];
                [self.penController setRetObj:cVController];
                [cVController release];
            }];
        }
        else if (self.penController.modelCode == LolLolPen) {
            CalibViewController* cVController = [[CalibViewController alloc] initWithNibName:@"CalibViewController_iPad" bundle:nil];
            [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
            [cVController SetPenController:self.penController];
            [cVController setDevicePosition:leftDeviceBtn.selected btPosition:0];
            cVController.delegate = self;
            [self presentViewController:cVController animated:YES completion:^{
                [self.penController setRetObj:nil];
                [self.penController setRetObj:cVController];
                [cVController release];
            }];
        }
        else {
            NSString* xibName = str(@"EquilCalibrationViewController", @"EquilCalibrationViewController_iPad");
            EquilCalibrationViewController* cVController = [[EquilCalibrationViewController alloc] initWithNibName:xibName bundle:nil];
            [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
            [cVController SetPenController:self.penController];
            cVController.delegate = self;
            [self presentViewController:cVController animated:NO completion:^{
                [self.penController setRetObj:nil];
                [self.penController setRetObj:cVController];
                [cVController release];
            }];
        }
    }
    else {
        if (self.penController.modelCode <= LolLolPen) {
            CalibViewController* cVController = [[CalibViewController alloc] initWithNibName:@"CalibViewController" bundle:nil];
            [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
            [cVController SetPenController:self.penController];
            [cVController setDevicePosition:leftDeviceBtn.selected btPosition:0];
            cVController.delegate = self;
            [self presentViewController:cVController animated:YES completion:^{
                [self.penController setRetObj:nil];
                [self.penController setRetObj:cVController];
                [cVController release];
            }];
        }
        else {
            NSString* xibName = str(@"EquilCalibrationViewController", @"EquilCalibrationViewController_iPad");
            EquilCalibrationViewController* cVController = [[EquilCalibrationViewController alloc] initWithNibName:xibName bundle:nil];
            [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
            [cVController SetPenController:self.penController];
            cVController.delegate = self;
            [self presentViewController:cVController animated:NO completion:^{
                [self.penController setRetObj:nil];
                [self.penController setRetObj:cVController];
                [cVController release];
            }];
        }
    }
}
-(void) closeCalibViewController:(BOOL)left btPosition:(int)positionBT rect:(CGRect)rect caliRect:(CGRect)caliRect{
    if (self.penController.modelCode == LolLolPen) {
        if (leftDeviceBtn.selected != left) {
//            [self saveDevicePosition:left btPosition:positionBT deviceHeight:self.view.frame.size.height];
        }
    }
    else if (self.penController.modelCode == Equil || self.penController.modelCode == EquilPro || self.penController.modelCode == EquilSmartMarker) {
        if (!CGRectEqualToRect(rect, CGRectZero)) {
            self.curCalibrationSize = Custom;
            self.curCalibrationRect = caliRect;
        }
    }
}
-(void) closeCalibViewController_FromEquilCalibrationViewController {
    [self closeCalibViewController:YES btPosition:0 rect:CGRectZero caliRect:CGRectZero];
}
-(void) closeCalibViewController_FromEquilCalibrationViewController:(CGRect)rect caliRect:(CGRect)caliRect {
    [self closeCalibViewController:YES btPosition:0 rect:rect caliRect:caliRect];
}
#pragma mark - Calibration delegate
-(void) closeCalibViewController:(BOOL)left btPosition:(int)positionBT {
    [self changeDevicePosition:left init:NO];
}
#pragma mark - Calibration9 delegate
-(void) closeCalib9ViewController {
    
}
#pragma mark -
-(IBAction)timeTest:(id)sender {
    NSString* xibName = @"TimeTestViewController";
    if (IS_IPAD)
        xibName = @"TimeTestViewController_iPad";
    
    TimeTestViewController* cVController = [[TimeTestViewController alloc] initWithNibName:xibName bundle:nil];
    [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
    [cVController SetPenController:self.penController];
    [self presentViewController:cVController animated:YES completion:^{
        [self.penController setRetObj:nil];
        [self.penController setRetObj:cVController];
        [self.penController setRetObjForEnv:cVController];
        [cVController release];
    }];
}
-(IBAction)leftDeviceClicked:(id)sender {
    UIAlertView* av = [[UIAlertView alloc] initWithTitle:nil
                                                 message:@"The receiver is set to the left, and the workspace fits to Letter size"
                                                delegate:self
                                       cancelButtonTitle:@"Ok"
                                       otherButtonTitles:nil];
    [av show];
    [av release];
    [self changeDevicePosition:YES init:YES];
}
-(IBAction)rightDeviceClicked:(id)sender {
    UIAlertView* av = [[UIAlertView alloc] initWithTitle:nil
                                                 message:@"The receiver is set to the right, and the workspace fits to Letter size"
                                                delegate:self
                                       cancelButtonTitle:@"Ok"
                                       otherButtonTitles:nil];
    [av show];
    [av release];
    [self changeDevicePosition:NO init:YES];
}
-(IBAction)drawingClicked:(id)sender {
    NSString* xibName = @"DrawViewController";
    if (IS_IPAD)
        xibName = @"DrawViewController_iPad";
    NSLog(@"pressure:%d",self.penController.pressure);
    self.drawViewController = [[[DrawViewController alloc] initWithNibName:xibName bundle:nil] autorelease];
    self.drawViewController.penController = self.penController;
    self.drawViewController.calibrationRect = self.curCalibrationRect;
    self.drawViewController.calibrationSize = self.curCalibrationSize;
    [self.drawViewController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
    [self presentViewController:self.drawViewController animated:YES completion:^{
    }];
}
-(IBAction)stopPenClicked:(id)sender {
    if (self.penController) {
        [self.penController stopPen];
    }
}
-(IBAction)reStartPenClicked:(id)sender {
    if (self.penController) {
        [self.penController restartPen];
    }
}
#pragma mark TableView
-(CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 40;
}
-(UIView *) tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    UIView* headerView = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, 44)]autorelease];
    UILabel* hLabel = [[[UILabel alloc]initWithFrame:CGRectMake(15, 20, tableView.frame.size.width, 22)]autorelease];
    hLabel.backgroundColor = [UIColor clearColor];
    hLabel.font = [UIFont fontWithName:@"Helvetica-Bold" size:17];
    hLabel.text = [self.sections objectAtIndex:section];
    [headerView addSubview:hLabel];
    if (section == 4 || section == 5) {
        [headerView setUserInteractionEnabled:YES];
        UIButton *clearBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [clearBtn setUserInteractionEnabled:YES];
        clearBtn.frame = CGRectMake(tableView.frame.size.width-80, 20, 80, 22);
        [clearBtn setTitle:@"Clear" forState:UIControlStateNormal];
        clearBtn.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue" size:14];
        clearBtn.backgroundColor = [UIColor clearColor];
        [clearBtn setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
        clearBtn.titleLabel.textAlignment = NSTextAlignmentLeft;
        clearBtn.tag = section;
        [clearBtn addTarget:self action:@selector(clearClicked:) forControlEvents:UIControlEventTouchUpInside];
        [headerView addSubview:clearBtn];
    }
    return headerView;
}
-(NSInteger) numberOfSectionsInTableView:(UITableView *)tableView {
    return self.items.count;
}
-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [[self.items objectForKey:[self.sections objectAtIndex:section]] count];
}
-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NSString *CellIdentifier = [NSString stringWithFormat:@"Cell%d%d", (int)indexPath.section, (int)indexPath.row];
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:CellIdentifier]autorelease];
    }
    [[cell.contentView subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];
    cell.backgroundColor = [UIColor whiteColor];
    cell.textLabel.font = [UIFont fontWithName:@"Helvetica-Light" size:p(10, 14)];
    cell.textLabel.text =
        (NSString*)[[self.items objectForKey:[self.sections objectAtIndex:indexPath.section]] objectAtIndex:indexPath.row];
    cell.detailTextLabel.font = [UIFont fontWithName:@"Helvetica-Light" size:p(10, 14)];
    cell.accessoryType = UITableViewCellAccessoryNone;
    
    switch (indexPath.section) {
        case 0: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.modelCode]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.HWVersion]:@""]; break; }
                case 2: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.MCU1Version]:@""]; break; }
                case 3: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.MCU2Version]:@""]; break; }
                default:
                    break;
            }
            break;
        }
        case 1: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.status]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?NSStringFromCGPoint(self.rawPt):@""]; break; }
                case 2: {
                    NSString* str = [NSString stringWithFormat:@"{%.3f, %.3f}", self.convPt.x, self.convPt.y];
                    [cell.detailTextLabel setText:self.penController.bConnected?str:@""]; break;
                }
                default:
                    break;
            }
            break;
        }
        case 2: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.pressure]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.temperature]:@""]; break; }
                case 2: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", savePenAliveSec]:@""]; break; }
                default:
                    break;
            }
            break;
        }
        case 3: {
            if (self.penController.bConnected && self.penController.modelCode == 4) {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:self.position]; break; }
                    case 1: { [cell.detailTextLabel setText:self.smFlag?@"Right":@"Left"]; break; }
                    case 2: {
                        UISegmentedControl* seg = [[[UISegmentedControl alloc] initWithItems:[NSArray arrayWithObjects:@"Beep",
                                                                                              @"Beep&Audio", nil]] autorelease];
                        if (!(IS_IPAD)) {
                            [seg setWidth:100 forSegmentAtIndex:0];
                            [seg setWidth:100 forSegmentAtIndex:1];
                        }
                        if (self.penController.AudioMode)
                            [seg setSelectedSegmentIndex:1];
                        else
                            [seg setSelectedSegmentIndex:0];
                        [seg addTarget:self action:@selector(audioModeChanged:) forControlEvents:UIControlEventValueChanged];
                        cell.accessoryView = seg;
                        break;
                    }
                    case 3: {
                        UISlider* si = [[[UISlider alloc] initWithFrame:CGRectMake(0, 0, 150, 21)] autorelease];
                        [si setMinimumValue:0];
                        [si setMaximumValue:AUDIO_USR_MAX];
                        int value = AUDIO_DEV_MAX-(int)self.penController.Volume;
                        if (value > AUDIO_USR_MAX) {
                            value = AUDIO_USR_MAX;
                            [self.penController changeVolume:AUDIO_DEV_MAX-AUDIO_USR_MAX];
                        }
                        [si setValue:value animated:NO];
                        [si addTarget:self action:@selector(volumeChanged:) forControlEvents:UIControlEventTouchUpInside];
                        [si addTarget:self action:@selector(volumeChanged:) forControlEvents:UIControlEventTouchUpOutside];
                        cell.accessoryView = si;
                        break;
                    }
                    case 4: { [cell.detailTextLabel setText:self.smProperties]; break; }
                    default:
                        break;
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    case 2: {
                        cell.accessoryView = nil;
                        break;
                    }
                    case 3: {
                        cell.accessoryView = nil;
                        break;
                    }
                    case 4: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        case 4: {
            if (self.penController.bConnected && (self.penController.modelCode == 4 || self.penController.modelCode == 3)) {
                switch (indexPath.row) {
                    case 0: {
                        if (self.penController.modelCode == EquilSmartMarker || self.penController.modelCode == EquilPro) {
                            [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d%%", battery[0]]];
                        }
                        if (battery[0] == -1)
                            [cell.detailTextLabel setText:@"No Data"];
                        break;
                    }
                    case 1: {
                        NSLog(@"========= battery[1] = %d", battery[1]);
                        if (self.penController.modelCode == EquilSmartMarker) {
                            [cell.detailTextLabel setText:[NSString stringWithFormat:@"%@", battery[1]?@"LOW":@"HIGH"]];
                        }
                        else if (self.penController.modelCode == EquilPro) {
                            [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d%%", battery[1]]];
                        }
                        
                        if (battery[1] == -1)
                            [cell.detailTextLabel setText:@"No Data"];
                        break;
                    }
                    default:
                        break;
                }
            }
            else {
                [cell.detailTextLabel setText:@""];
            }
            break;
        }
        case 5: {
            if (self.penController.bConnected) {
                float byte = ((downCnt+moveCnt+upCnt)*6)+((downCnt+moveCnt+upCnt)/12)+1;
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"{%d, %d, %d}", downCnt, moveCnt, upCnt]]; break; }
                    case 1: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d", downCnt+moveCnt+upCnt]]; break; }
                    case 2: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d Byte(%.3f Kb)", (int)byte, byte/1024.f]]; break; }
                    default:
                        break;
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    case 2: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        case 6: {
            if (self.penController.bConnected) {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"{%d, %d}", errCntX, errCntY]]; break; }
                    case 1: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d", packetCnt]]; break; }
                    default:
                        break;
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        default: {
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            break;
        }
    }
    return cell;
}
-(void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}
-(void) audioModeChanged:(id)sender {
    if (self.penController.bConnected && self.penController.modelCode == 4) {
        UISegmentedControl* s = (UISegmentedControl*)sender;
        NSLog(@"audioModeChanged %d", (int)s.selectedSegmentIndex);
        [self.penController changeAudioMode:s.selectedSegmentIndex==0?NO:YES];
    }
}
-(void) volumeChanged:(id)sender {
    if (self.penController.bConnected && self.penController.modelCode == 4) {
        UISlider* s = (UISlider*)sender;
        int value = AUDIO_DEV_MAX-(int)s.value;
        NSLog(@"volumeChanged = %f, %d", s.value, value);
        [self.penController changeVolume:value];
    }
}
-(void) clearClicked:(id)sender {
    UIButton* btn = (UIButton*)sender;
    if (btn.tag == 4) {
        downCnt = 0;
        moveCnt= 0;
        upCnt = 0;
        [mTableView reloadData];
    }
    else if (btn.tag == 5) {
        packetCnt = 0;
        errCntX = 0;
        errCntY = 0;
        beforeRawX = -1;
        beforeRawY = -1;
        [mTableView reloadData];
    }
}
// iOS7 support
- (void)navigationController:(UINavigationController *)navigationController
      willShowViewController:(UIViewController *)viewController
                    animated:(BOOL)animated {
    [[UIApplication sharedApplication] setStatusBarHidden:YES];
}
@end
